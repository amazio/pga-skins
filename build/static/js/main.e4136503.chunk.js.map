{"version":3,"sources":["contexts/StoreProvider.js","services/matchService.js","reducers/store-reducer.js","services/userService.js","services/tourneyService.js","components/TabPanel/TabPanel.jsx","components/CenteredSpinner/CenteredSpinner.jsx","components/TourneyCard/TourneyCard.jsx","components/SelectRoundForNewMatch/SelectRoundForNewMatch.jsx","screens/CurTourneyScreen/CurTourneyScreen.jsx","screens/PrevTourneyScreen/PrevTourneyScreen.jsx","screens/MatchesScreen/MatchesScreen.jsx","components/TopBar/TopBar.jsx","components/BottomNav/BottomNav.jsx","screens/GridWithBottomMenu/GridWithBottomMenu.jsx","screens/WelcomeScreen/WelcomeScreen.jsx","screens/GridNoMenu/GridNoMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["createContext","state","dispatch","getSavedMatches","getMatchesByTourneyId","tourneyId","filter","m","getCurAndPrevSavedMatches","curTourneyId","allSavedMatches","curSavedMatches","prevSavedMatches","savedMatches","JSON","parse","window","localStorage","getItem","Array","isArray","setItem","initialState","username","deviceId","curTourney","ui","matchesTab","actions","storeReducer","action","type","payload","matchService","_id","console","log","init","Date","now","Math","floor","random","updateUsername","setCurTourney","freqMS","a","async","fetch","process","then","res","json","tourney","setTimeout","TabPanel","props","value","index","children","Typography","component","role","hidden","CenteredSpinner","className","CircularProgress","TourneyCard","isCurTourney","isStarted","realHistory","isFinished","startDate","curRound","roundState","history","useHistory","Card","variant","CardHeader","title","subheader","CardActions","Button","onClick","e","preventDefault","stopPropagation","push","startIcon","Add","size","color","SelectRoundForNewMatch","CurTourneyScreen","useContext","StoreProvider","matches","length","List","ListItem","exact","path","render","PrevTourneyScreen","MatchesScreen","Tabs","onChange","newValue","Tab","label","TopBar","AppBar","position","Toolbar","BottomNav","useState","routeScreen","setRouteScreen","BottomNavigation","newRoute","showLabels","BottomNavigationAction","icon","GolfCourse","Settings","GridWithBottomMenu","Box","WelcomeScreen","setUsername","style","marginBottom","TextField","autoComplete","placeholder","fullWidth","target","userService","disabled","marginTop","GridNoMenu","Container","App","useReducer","useEffect","tourneyService","Provider","Boolean","location","hostname","match","vh","innerHeight","document","documentElement","setProperty","addEventListener","theme","createMuiTheme","palette","primary","main","contrastText","secondary","overrides","MuiBottomNavigationAction","MuiBottomNavigation","backgroundColor","ReactDOM","ThemeProvider","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4136503.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport default createContext({state: null, dispatch: null});","export default {\n  getSavedMatches,\n  getMatchesByTourneyId,\n  getCurAndPrevSavedMatches\n  // updateCurMatches\n};\n\nconst MATCHES_KEY = 'matches';\n\nfunction getCurAndPrevSavedMatches(curTourneyId) {\n  const allSavedMatches = getSavedMatches();\n  const curSavedMatches = allSavedMatches.filter(m => m.tourneyId === curTourneyId);\n  const prevSavedMatches = allSavedMatches.filter(m => m.tourneyId !== curTourneyId);\n  return [curSavedMatches, prevSavedMatches, allSavedMatches];\n}\n\n\n\n// function updateCurMatches(tourney) {\n//   let matches = getMatchesByTourneyId(tourney._id);\n//   const lb = tourney.leaderboard;\n//   // Filter matches to those with updated players\n//   matches = matches.filter(m => m.players.some(p => {\n//     // Match has completed\n//     if (m.completed) return false;\n//     const lbPlayer = lb.find(lbP => lbP.playerId === p.playerId);\n//     return p.thru !== lbPlayer.thru;\n//   }));\n//   matches.forEach(match => {\n//     match.players = match.players.map(p => {\n//       const lbPlayer = lb.find(lbP => lbP.playerId === p.playerId);\n//       const lbRound = lbPlayer.rounds.find(r => r.num === match.roundNum);\n//       if (lbRound) p.round = lbRound;\n//       return p;\n//     });\n//     // TODO: computeSkins()\n//     // TODO: persist on server\n//   });\n//   replaceSavedMatches(matches);\n// }\n\n// function replaceSavedMatches(updated) {\n//   let matches = getSavedMatches();\n//   matches = matches.map(m => {\n//     let match = updated.find(u => u._id === m._id);\n//     return match ? match : m;\n//   });\n//   window.localStorage.setItem(MATCHES_KEY, JSON.stringify(matches));\n// }\n\nfunction getMatchesByTourneyId(tourneyId) {\n  const matches = getSavedMatches();\n  return matches.filter(m => m.tourneyId === tourneyId);\n}\n\nfunction getSavedMatches() {\n  let savedMatches = JSON.parse(window.localStorage.getItem(MATCHES_KEY));\n  if (!Array.isArray(savedMatches)) {\n    // Initialize curMatches to empty array\n    window.localStorage.setItem(MATCHES_KEY, '[]');\n    savedMatches = [];\n  }\n  return savedMatches;\n}","import matchService from '../services/matchService';\n\nexport const initialState = {\n  username: '',\n  deviceId: '',\n  curTourney: null,\n  curSavedMatches: null,\n  prevSavedMatches: null,\n  ui: {matchesTab: 'current'}\n};\n\nexport const actions = {\n  UPDATE_USER_DEVICE_INFO: 'UPDATE_USER_DEVICE_INFO',\n  UPDATE_USERNAME: 'UPDATE_USERNAME',\n  UPDATE_CUR_TOURNEY: 'UPDATE_CUR_TOURNEY',\n  UPDATE_UI_MATCHES_TAB: 'UPDATE_UI_MATCHES_TAB',\n  // CREATE_MATCH_PENDING: 'CREATE_MATCH_PENDING'\n};\n\nfunction storeReducer(state, action) {\n  switch(action.type) {\n    case actions.UPDATE_USER_DEVICE_INFO:\n      return {...state, deviceId: action.payload.deviceId, username: action.payload.username};\n    case actions.UPDATE_USERNAME:\n      return {...state, username: action.payload};\n    case actions.UPDATE_CUR_TOURNEY:\n      const [curSavedMatches, prevSavedMatches] = matchService.getCurAndPrevSavedMatches(action.payload._id);\n      return {...state, curTourney: action.payload, curSavedMatches, prevSavedMatches};\n    case actions.UPDATE_UI_MATCHES_TAB:\n      return {...state, ui: {...state.ui, matchesTab: action.payload}};\n    // case actions.CREATE_MATCH_PENDING:\n      // create match\n\n    default:\n      console.log('Received unknow action.type');\n      return state;\n  }\n}\n\nexport default storeReducer;\n","import {actions} from '../reducers/store-reducer';\n\nexport default {\n  init,\n  updateUsername\n};\n\nconst USERNAME_KEY = 'username';\nconst DEVICE_KEY = 'deviceId';\n\nfunction updateUsername(username, dispatch) {\n  dispatch({type: actions.UPDATE_USERNAME, payload: username});\n  window.localStorage.setItem(USERNAME_KEY, username);\n}\n\n// return true if had to initialize (first visit for this user on the device)\nfunction init(dispatch) {\n  let deviceId = window.localStorage.getItem(DEVICE_KEY);\n  const username = window.localStorage.getItem(USERNAME_KEY);\n  if (deviceId) {\n    dispatch({type: actions.UPDATE_USER_DEVICE_INFO, payload: {deviceId, username}});\n    return false;\n  } else {\n    // First visit on this device!\n    deviceId = Date.now() + Math.floor(Math.random() * 1000);\n    window.localStorage.setItem(DEVICE_KEY, deviceId);\n    dispatch({type: actions.UPDATE_USER_DEVICE_INFO, payload: {deviceId, username: ''}});\n    // return true so that app will go to welcome screen & get username\n    return true;\n  }\n}","import {actions} from '../reducers/store-reducer';\n\nconst CUR_TOURNEY_ENDPOINT = process.env.REACT_APP_CUR_TOURNEY_ENDPOINT;\n\nexport default {\n  setCurTourney\n};\n\nasync function setCurTourney(dispatch, freqMS) {\n  const tourney = await getCurTourney();\n  dispatch({type: actions.UPDATE_CUR_TOURNEY, payload: tourney});\n  setTimeout(() => setCurTourney(dispatch, freqMS), freqMS);\n}\n\nfunction getCurTourney() {\n  return fetch(CUR_TOURNEY_ENDPOINT).then(res => res.json());\n}\n","import React from 'react';\nimport { Typography } from '@material-ui/core';\n\nexport default function TabPanel(props) {\n  const {value, index, children} = props;\n  return (\n    <Typography component='div' role='tabpanel'\n      hidden={value !== index}\n    >\n      {value === index && children}\n    </Typography>\n  );\n}","import React from 'react';\nimport { CircularProgress } from '@material-ui/core';\n\nexport default function CenteredSpinner() {\n  return (\n    <section className='flex-col-ctr height-width-100'>\n      <CircularProgress />\n    </section>\n  );\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Card, CardActions, CardHeader, Button } from '@material-ui/core';\nimport { Add } from '@material-ui/icons';\n\nexport default function TourneyCard({tourney, isCurTourney, realHistory}) {\n  const { isStarted, isFinished, startDate, curRound, roundState } = tourney;\n  const history = useHistory();\n\n  function getStatus() {\n    if (isFinished) {\n      return 'Tourney Completed';\n    } else if (isStarted) {\n      return `Round ${curRound} ${roundState}`;\n    } else {\n      return `Starts on ${startDate}`;\n    }\n  }\n  \n  \n  function handleNewMatchClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    history.push('/pick-round');\n  }\n\n  return (\n    <Card variant='outlined' className='margin-bottom-1rem'>\n      <CardHeader title={tourney.title} subheader={getStatus()} />\n      {isCurTourney &&\n        <CardActions>\n          <Button onClick={handleNewMatchClick} variant='contained' startIcon={<Add />} size='small' color='primary'>\n            MATCH\n          </Button>\n        </CardActions>\n      }\n    </Card>\n  );\n}","import React from 'react';\n\nexport default function SelectRoundForNewMatch({tourney}) {\n  return (\n    <div>select round</div>\n  );\n}","import React, { useContext } from 'react';\nimport { Route } from 'react-router-dom';\nimport StoreProvider from '../../contexts/StoreProvider';\nimport { List, ListItem, Typography } from '@material-ui/core';\nimport CenteredSpinner from '../../components/CenteredSpinner/CenteredSpinner';\nimport TourneyCard from '../../components/TourneyCard/TourneyCard';\nimport SelectRoundForNewMatch from '../../components/SelectRoundForNewMatch/SelectRoundForNewMatch';\n\nexport default function CurTourneyScreen() {\n  const {state, realHistory} = useContext(StoreProvider);\n  const {curTourney, curSavedMatches: matches} = state;\n  return (\n    curTourney ?\n      <>\n        <TourneyCard tourney={curTourney} isCurTourney={true} realHistory={realHistory}/>\n        { \n          matches.length ?\n            <List>\n              <ListItem>\n\n              </ListItem>\n            </List>\n          :\n            <Typography variant='body1'>No Matches</Typography>\n        }\n        <Route exact path='/pick-round' render={() => \n          <SelectRoundForNewMatch tourney={curTourney} />\n        } />\n      </>\n      :\n      <CenteredSpinner />\n  );\n}","import React from 'react';\nimport CenteredSpinner from '../../components/CenteredSpinner/CenteredSpinner';\nimport TourneyCard from '../../components/TourneyCard/TourneyCard';\n\nexport default function PrevTourneyScreen({ state, dispatch }) {\n  return (\n    <h1>TODO: This is the PrevTourneyScreen</h1>\n  );\n}","import React, { useContext } from 'react';\nimport StoreProvider from '../../contexts/StoreProvider';\nimport { actions } from '../../reducers/store-reducer';\nimport { Tabs, Tab } from '@material-ui/core';\nimport TabPanel from '../../components/TabPanel/TabPanel';\nimport CurTourneyScreen from '../CurTourneyScreen/CurTourneyScreen';\nimport PrevTourneyScreen from '../PrevTourneyScreen/PrevTourneyScreen';\n\nexport default function MatchesScreen() {\n  const {state, dispatch} = useContext(StoreProvider);\n  return (\n    <>\n      <Tabs variant='fullWidth' value={state.ui.matchesTab} className='margin-bottom-1rem'\n        onChange={(e, newValue) => dispatch({type: actions.UPDATE_UI_MATCHES_TAB, payload: newValue})}\n      >\n        <Tab value='current' label='Current Tourney' />\n        <Tab value='previous' label='Previous Tourneys' />\n      </Tabs>\n      <TabPanel value={state.ui.matchesTab} index='current'>\n        <CurTourneyScreen />\n      </TabPanel>\n      <TabPanel value={state.ui.matchesTab} index='previous'>\n        <PrevTourneyScreen />\n      </TabPanel>\n    </>\n  );\n}","import React from 'react';\nimport {AppBar, Toolbar, Typography} from '@material-ui/core';\n\n\nfunction TopBar() {\n  return (\n    <AppBar position='sticky'>\n      <Toolbar>\n        <Typography variant=\"h6\">\n          PGA SKINS\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default TopBar;","import React, {useState} from 'react';\nimport {BottomNavigation, BottomNavigationAction} from '@material-ui/core';\nimport {Settings, GolfCourse} from '@material-ui/icons';\n\nfunction BottomNav() {\n  const [routeScreen, setRouteScreen] = useState('matches');\n\n  function handleChangeRoute(e, newRoute) {\n    if (newRoute === routeScreen) return;\n    setRouteScreen(newRoute);\n  }\n\n  return (\n    <BottomNavigation value={routeScreen} onChange={handleChangeRoute} showLabels>\n      <BottomNavigationAction value='matches' label='Matches' icon={<GolfCourse />} />\n      <BottomNavigationAction value='settings' label='Settings' icon={<Settings />} />\n    </BottomNavigation>\n  );\n} \n\nexport default BottomNav;\n","import React from 'react';\nimport './GridWithBottomMenu.css';\nimport {Route, Switch} from 'react-router-dom';\nimport {Box} from '@material-ui/core';\nimport MatchesScreen from '../MatchesScreen/MatchesScreen';\nimport TopBar from '../../components/TopBar/TopBar';\nimport BottomNav from '../../components/BottomNav/BottomNav';\n\nfunction GridWithBottomMenu() {\n  return (\n    <Box className='GWBM_grid'>\n      <TopBar />\n      <Box className='GWBM_content'>\n        <Switch>\n          <Route path='/' render={() =>\n            <MatchesScreen />\n          } />\n        </Switch>\n      </Box>\n      <BottomNav />\n    </Box>\n  );\n}\n\nexport default GridWithBottomMenu;","import React, {useState, useContext} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport StoreProvider from '../../contexts/StoreProvider';\nimport {Button, TextField, Typography} from '@material-ui/core';\nimport userService from '../../services/userService';\n\n\nimport { Link } from 'react-router-dom'\n\nfunction WelcomeScreen(props) {\n  const history = useHistory();\n  const {dispatch} = useContext(StoreProvider);\n  const [username, setUsername] = useState('');\n\n  function updateUsername() {\n    userService.updateUsername(username, dispatch);\n    history.push('/');\n  }\n\n  return (\n    <>\n      <Typography variant='h4' className='text-center' style={{marginBottom: '2rem'}}>Welcome to<br/>PGA SKINS!</Typography>\n      <Typography variant='body2' className='text-center'>Please enter the user name you want others to see when viewing a skins match created by you:<br/><br/></Typography>\n      <TextField autoComplete='off' variant='outlined' placeholder='User Name' fullWidth\n        value={username} onChange={(e) => setUsername(e.target.value)}\n      />\n      <Button onClick={updateUsername} disabled={username.length < 3 || username.length > 20} style={{marginTop: '1rem'}} variant='contained'>SUBMIT</Button>\n    </>\n  );\n}\n\nexport default WelcomeScreen;","import React from 'react';\nimport './GridNoMenu.css';\nimport { Route, Switch } from 'react-router-dom';\nimport { Container, Box } from '@material-ui/core';\nimport TopBar from '../../components/TopBar/TopBar';\nimport WelcomeScreen from '../WelcomeScreen/WelcomeScreen';\n\nfunction GridNoMenu() {\n  return (\n    <Box className='GNM_grid'>\n      <TopBar />\n      <Container className='flex-col-ctr'>\n        <Switch>\n          <Route exact path='/welcome' render={() =>\n            <WelcomeScreen />\n          } />\n        </Switch>\n      </Container>\n    </Box>\n  );\n}\n\nexport default GridNoMenu;","import React, { useEffect, useReducer } from 'react';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport StoreProvider from './contexts/StoreProvider';\nimport storeReducer, { initialState } from './reducers/store-reducer';\nimport userService from './services/userService';\nimport tourneyService from './services/tourneyService';\nimport GridWithBottomMenu from './screens/GridWithBottomMenu/GridWithBottomMenu';\nimport GridNoMenu from './screens/GridNoMenu/GridNoMenu';\n\nexport default function App() {\n  const history = useHistory();\n  const [state, dispatch] = useReducer(storeReducer, initialState);\n  \n  useEffect(function () {\n    // Fetch the cur tourney every hour\n    tourneyService.setCurTourney(dispatch, 1000 * 60 * 60);\n    // init will return true if this is the first visit for the device\n    if (userService.init(dispatch)) history.push('/welcome');\n  }, []);\n\n  return (\n    <StoreProvider.Provider value={{state, dispatch}}>\n      <Switch>\n        <Route path='/welcome' render={() =>\n          <GridNoMenu />\n        } />\n        {/* Routes without bottom menu go above */}\n        <Route path='/' render={() =>\n          <GridWithBottomMenu />\n        } />\n      </Switch>\n    </StoreProvider.Provider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles';\n\n/*--- hack to fix 100vh on mobile issue ---*/\n// First we get the viewport height and we multiple it by 1% to get a value for a vh unit\nlet vh = window.innerHeight * 0.01;\n// Then we set the value in the --vh custom property to the root of the document\ndocument.documentElement.style.setProperty('--vh', `${vh}px`);\n\n// We listen to the resize event\nwindow.addEventListener('resize', () => {\n  // We execute the same script as before\n  let vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n});\n\nconst themeMint = {\n  palette: {\n    primary: { main: '#d5dcd6', contrastText: '#051907' },\n    secondary: { main: '#d8dae8', contrastText: '#051907' }\n  },\n  overrides: {\n    MuiBottomNavigationAction: {\n      \"root\": {\n        \"color\": 'white',\n        \"&$selected\": {\n          \"color\": \"#051907\"\n        }\n      }\n    },\n    MuiBottomNavigation: {\n      \"root\": {\n        backgroundColor: '#d5dcd6'\n      }\n    }\n  }\n};\n\nconst theme = createMuiTheme(themeMint, 'Minty Green');\n\nReactDOM.render(\n  <Router>\n    <Route path='/' render={() =>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    } />\n  </Router>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}