{"version":3,"sources":["services/tourneyService.js","screens/HomeScreen/HomeScreen.jsx","screens/GridWithBottomMenu/GridWithBottomMenu.js","App.js","serviceWorker.js","index.js"],"names":["setTourneyFn","socket","window","io","notifyUpdateTourney","tourney","subscribeToUpdates","setTourney","on","unsubscribeToUpdates","off","HomeScreen","players","leaderboard","map","p","shortName","length","GridWithBottomMenu","props","className","path","App","useState","useEffect","tourneyService","Boolean","location","hostname","match","vh","innerHeight","document","documentElement","style","setProperty","addEventListener","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MAGIA,E,gEAHEC,EAASC,OAAOC,KAmBtB,SAASC,EAAoBC,GACvBL,GAAcA,EAAaK,GAGlB,OACbC,mBAjBF,SAA4BC,GAC1BP,EAAeO,EACfN,EAAOO,GAAG,iBAAkBJ,IAgB5BK,qBAbF,WACER,EAAOS,IAAI,iBAAkBN,GAC7BJ,EAAe,O,MCDFW,MAXf,YAAoC,IAC9BC,EAD6B,EAAdC,YACOC,KAAI,SAAAC,GAAC,OAAI,6BAAMA,EAAEC,cAG3C,OAFKJ,EAAQK,SAAQL,EAAU,4CAG7B,iCACGA,ICcQM,MAjBf,SAA4BC,GAC1B,OACE,0BAAMC,UAAU,aACd,6BAASA,UAAU,gBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACV,kBAAC,EAAD,CAAYR,YAAaM,EAAMd,QAAQQ,iBAI7C,yBAAKO,UAAU,YAAf,iBCaSE,MArBf,WAAgB,IAAD,EAEiBC,mBAAS,CAACV,YAAa,KAFxC,mBAENR,EAFM,KAEGE,EAFH,KAWb,OAPAiB,qBAAU,WAER,OADAC,EAAenB,mBAAmBC,GAC3B,WACLkB,EAAehB,0BAEhB,IAGD,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOY,KAAK,KACV,kBAAC,EAAD,CAAoBhB,QAASA,OCVjBqB,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2D,WCTFC,EAA0B,IAArB5B,OAAO6B,YAEhBC,SAASC,gBAAgBC,MAAMC,YAAY,OAA3C,UAAsDL,EAAtD,OAGA5B,OAAOkC,iBAAiB,UAAU,WAEhC,IAAIN,EAA0B,IAArB5B,OAAO6B,YAChBC,SAASC,gBAAgBC,MAAMC,YAAY,OAA3C,UAAsDL,EAAtD,UAGFO,IAASC,OAAO,kBAAC,IAAD,KAAQ,kBAAC,EAAD,OAAkBN,SAASO,eAAe,SD+G5D,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9caf3c70.chunk.js","sourcesContent":["const socket = window.io();\n\n/*--- vars to hold useState setters ---*/\nlet setTourneyFn;\n\n\n/*--- App component calls these to sub/unsub for updates ---*/\nfunction subscribeToUpdates(setTourney) {\n  setTourneyFn = setTourney;\n  socket.on('update-tourney', notifyUpdateTourney);\n}\n\nfunction unsubscribeToUpdates() {\n  socket.off('update-tourney', notifyUpdateTourney);\n  setTourneyFn = null;\n}\n\n/*--- Helper Functions ---*/\n\nfunction notifyUpdateTourney(tourney) {\n  if (setTourneyFn) setTourneyFn(tourney);\n}\n\nexport default {\n  subscribeToUpdates,\n  unsubscribeToUpdates\n}","import React from 'react';\n\nfunction HomeScreen({leaderboard}) {\n  let players = leaderboard.map(p => <div>{p.shortName}</div>);\n  if (!players.length) players = <div>LOADING...</div>;\n  \n  return (\n    <section>\n      {players}\n    </section>\n  );\n}\n\nexport default HomeScreen;","import React from 'react';\nimport './GridWithBottomMenu.css';\nimport {Route, Switch} from 'react-router-dom';\nimport HomeScreen from '../HomeScreen/HomeScreen';\n\nfunction GridWithBottomMenu(props) {\n  return (\n    <main className='GWBM_grid'>\n      <section className='GWBM_content'>\n        <Switch>\n          <Route path='/'>\n            <HomeScreen leaderboard={props.tourney.leaderboard} />\n          </Route>\n        </Switch>\n      </section>\n      <nav className='GWBM_nav'>\n        BOTTOM MENU\n      </nav>\n    </main>\n  );\n}\n\nexport default GridWithBottomMenu;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {Route, Switch} from 'react-router-dom';\nimport tourneyService from './services/tourneyService';\n\nimport GridWithBottomMenu from './screens/GridWithBottomMenu/GridWithBottomMenu';\n\nfunction App() {\n\n  const [tourney, setTourney] = useState({leaderboard: []});\n\n  useEffect(function() {\n    tourneyService.subscribeToUpdates(setTourney);\n    return function() {\n      tourneyService.unsubscribeToUpdates();\n    };\n  }, []);\n\n  return (\n    <Switch>\n      {/* Routes without bottom menu go here */}\n      <Route path='/'>\n        <GridWithBottomMenu tourney={tourney}/>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\n/*--- hack to fix 100vh on mobile issue ---*/\n// First we get the viewport height and we multiple it by 1% to get a value for a vh unit\nlet vh = window.innerHeight * 0.01;\n// Then we set the value in the --vh custom property to the root of the document\ndocument.documentElement.style.setProperty('--vh', `${vh}px`);\n\n// We listen to the resize event\nwindow.addEventListener('resize', () => {\n  // We execute the same script as before\n  let vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n});\n\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}