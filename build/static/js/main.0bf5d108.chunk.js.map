{"version":3,"sources":["contexts/StoreProvider.js","services/matchService.js","reducers/store-reducer.js","services/userService.js","components/TourneyCard/TourneyCard.jsx","screens/CurTourneyScreen/CurTourneyScreen.jsx","components/TopBar/TopBar.jsx","components/BottomNav/BottomNav.jsx","screens/GridWithBottomMenu/GridWithBottomMenu.jsx","screens/WelcomeScreen/WelcomeScreen.jsx","screens/GridNoMenu/GridNoMenu.jsx","App.js","serviceWorker.js","index.js"],"names":["createContext","getSavedMatches","getMatchesByTourneyId","updateCurMatches","tourney","matches","_id","lb","leaderboard","filter","m","players","some","p","completed","lbPlayer","find","lbP","playerId","thru","forEach","match","map","lbRound","rounds","r","num","roundNum","round","updated","u","window","localStorage","setItem","JSON","stringify","replaceSavedMatches","tourneyId","savedMatches","parse","getItem","Array","isArray","initialState","username","deviceId","curTourney","curMatches","actions","storeReducer","state","action","a","async","type","payload","matchService","init","dispatch","Date","now","Math","floor","random","updateUsername","TourneyCard","Card","CardContent","Typography","title","CardActions","Button","variant","color","CurTourneyScreen","useContext","StoreProvider","ListItem","ListItemText","curPosition","shortName","total","sort","b","name","label","value","TopBar","AppBar","position","Toolbar","BottomNav","useState","routeScreen","setRouteScreen","BottomNavigation","onChange","e","newRoute","showLabels","BottomNavigationAction","icon","GolfCourse","History","Settings","GridWithBottomMenu","props","Box","className","path","WelcomeScreen","history","useHistory","setUsername","style","marginBottom","TextField","autoComplete","placeholder","fullWidth","target","onClick","userService","push","disabled","length","marginTop","GridNoMenu","Container","exact","App","useReducer","console","log","useEffect","Provider","Boolean","location","hostname","vh","innerHeight","document","documentElement","setProperty","addEventListener","theme","createMuiTheme","palette","primary","main","contrastText","secondary","ReactDOM","render","ThemeProvider","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0bf5d108.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport default createContext();","export default {\n  getSavedMatches,\n  getMatchesByTourneyId,\n  updateCurMatches\n};\n\nconst MATCHES_KEY = 'matches';\n\nfunction updateCurMatches(tourney) {\n  let matches = getMatchesByTourneyId(tourney._id);\n  const lb = tourney.leaderboard;\n  // Filter matches to those with updated players\n  matches = matches.filter(m => m.players.some(p => {\n    // Match has completed\n    if (m.completed) return false;\n    const lbPlayer = lb.find(lbP => lbP.playerId === p.playerId);\n    return p.thru !== lbPlayer.thru;\n  }));\n  matches.forEach(match => {\n    match.players = match.players.map(p => {\n      const lbPlayer = lb.find(lbP => lbP.playerId === p.playerId);\n      const lbRound = lbPlayer.rounds.find(r => r.num === match.roundNum);\n      if (lbRound) p.round = lbRound;\n      return p;\n    });\n    // TODO: computeSkins()\n    // TODO: persist on server\n  });\n  replaceSavedMatches(matches);\n}\n\nfunction replaceSavedMatches(updated) {\n  let matches = getSavedMatches();\n  matches = matches.map(m => {\n    let match = updated.find(u => u._id === m._id);\n    return match ? match : m;\n  });\n  window.localStorage.setItem(MATCHES_KEY, JSON.stringify(matches));\n}\n\nfunction getMatchesByTourneyId(tourneyId) {\n  const matches = getSavedMatches();\n  return matches.filter(m => m.tourneyId === tourneyId);\n}\n\nfunction getSavedMatches() {\n  let savedMatches = JSON.parse(window.localStorage.getItem(MATCHES_KEY));\n  if (!Array.isArray(savedMatches)) {\n    // Initialize curMatches to empty array\n    window.localStorage.setItem(MATCHES_KEY, '[]');\n    savedMatches = [];\n  }\n  return savedMatches;\n}","import matchService from '../services/matchService';\n\nexport const initialState = {\n  username: '',\n  deviceId: '',\n  curTourney: null,\n  curMatches: []\n};\n\nexport const actions = {\n  UPDATE_USER_DEVICE_INFO: 'UPDATE_USER_DEVICE_INFO',\n  UPDATE_USERNAME: 'UPDATE_USERNAME',\n  UPDATE_CUR_TOURNEY: 'UPDATE_CUR_TOURNEY',\n};\n\nasync function storeReducer(state, action) {\n  switch(action.type) {\n    case actions.UPDATE_USER_DEVICE_INFO:\n      return {...state, deviceId: action.payload.deviceId, username: action.payload.username};\n    case actions.UPDATE_USERNAME:\n      return {...state, username: action.payload};\n    case actions.UPDATE_CUR_TOURNEY:\n      const curMatches = matchService.updateCurMatches(action.payload);\n      return {...state, curTourney: action.payload, curMatches};\n    default:\n      return state;\n  }\n}\n\nexport default storeReducer;\n","import {actions} from '../reducers/store-reducer';\n\nexport default {\n  init,\n  updateUsername\n};\n\nconst USERNAME_KEY = 'username';\nconst DEVICE_KEY = 'deviceId';\n\nfunction updateUsername(username, dispatch) {\n  dispatch({type: actions.UPDATE_USERNAME, payload: username});\n  window.localStorage.setItem(USERNAME_KEY, username);\n}\n\n// return true if had to initialize (first visit for this user on the device)\nfunction init(dispatch) {\n  let deviceId = window.localStorage.getItem(DEVICE_KEY);\n  const username = window.localStorage.getItem(USERNAME_KEY);\n  if (deviceId) {\n    dispatch({type: actions.UPDATE_USER_DEVICE_INFO, payload: {deviceId, username}});\n    return false;\n  } else {\n    // First visit on this device!\n    deviceId = Date.now() + Math.floor(Math.random() * 1000);\n    window.localStorage.setItem(DEVICE_KEY, deviceId);\n    dispatch({type: actions.UPDATE_USER_DEVICE_INFO, payload: {deviceId, username: ''}});\n    // return true so that app will go to welcome screen & get username\n    return true;\n  }\n}","import React from 'react';\n\nimport {Card, CardContent, CardActions, Typography, Button} from '@material-ui/core';\n\nfunction TourneyCard({tourney, curTourney}) {\n  return (\n    tourney ?\n      <Card>\n        <CardContent>\n          <Typography>{tourney.title}</Typography>\n        </CardContent>\n        { curTourney &&\n        <CardActions>\n          <Button variant='contained' color='primary'>ADD MATCH</Button>\n        </CardActions>\n        }\n      </Card>\n      : <h3>No Tourney</h3>\n  );\n}\n\nexport default TourneyCard;","import React, { useContext } from 'react';\nimport StoreProvider from '../../contexts/StoreProvider';\nimport {List, ListItem, ListItemText} from '@material-ui/core';\nimport TourneyCard from '../../components/TourneyCard/TourneyCard';\n\nfunction CurTourneyScreen() {\n  const {state, dispatch} = useContext(StoreProvider);\n  const players = state.curTourney ? \n    state.curTourney.leaderboard.map(p => <ListItem><ListItemText>{p.curPosition} - {p.shortName} - {p.total} thru {p.thru}</ListItemText></ListItem>)\n    : <ListItem>LOADING...</ListItem>;\n\n  const playerNames = state.curTourney ? \n    state.curTourney.leaderboard\n      .sort((a, b) => a.name - b.name)\n      .map(p =>({label: p.name, value: p.name}))\n    : [];\n  \n  return (\n    <>\n      <TourneyCard tourney={state.curTourney} curTourney={true} />\n    </>\n  );\n}\n\nexport default CurTourneyScreen;","import React from 'react';\nimport {AppBar, Toolbar, Typography} from '@material-ui/core';\n\n\nfunction TopBar() {\n  return (\n    <AppBar position='sticky'>\n      <Toolbar>\n        <Typography variant=\"h6\">\n          PGA SKINS\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default TopBar;","import React, {useState} from 'react';\nimport {BottomNavigation, BottomNavigationAction} from '@material-ui/core';\nimport {History, Settings, GolfCourse} from '@material-ui/icons';\n\nfunction BottomNav() {\n  const [routeScreen, setRouteScreen] = useState('current');\n\n  function handleChangeRoute(e, newRoute) {\n    if (newRoute === routeScreen) return;\n    setRouteScreen(newRoute);\n  }\n\n  return (\n    <BottomNavigation value={routeScreen} onChange={handleChangeRoute} showLabels>\n      <BottomNavigationAction value='current' label='Current' icon={<GolfCourse />} />\n      <BottomNavigationAction value='previous' label='Previous' icon={<History />} />\n      <BottomNavigationAction value='settings' label='Settings' icon={<Settings />} />\n    </BottomNavigation>\n  );\n} \n\nexport default BottomNav;\n","import React from 'react';\nimport './GridWithBottomMenu.css';\nimport {Route, Switch} from 'react-router-dom';\nimport {Box} from '@material-ui/core';\nimport CurTourneyScreen from '../CurTourneyScreen/CurTourneyScreen';\nimport TopBar from '../../components/TopBar/TopBar';\nimport BottomNav from '../../components/BottomNav/BottomNav';\n\nfunction GridWithBottomMenu(props) {\n  return (\n    <Box className='GWBM_grid'>\n      <TopBar />\n      <Box className='GWBM_content'>\n        <Switch>\n          <Route path='/'>\n            <CurTourneyScreen />\n          </Route>\n        </Switch>\n      </Box>\n      <BottomNav />\n    </Box>\n  );\n}\n\nexport default GridWithBottomMenu;","import React, {useState, useContext} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {Button, TextField, Typography} from '@material-ui/core';\nimport StoreProvider from '../../contexts/StoreProvider';\nimport userService from '../../services/userService';\n\nfunction WelcomeScreen() {\n  const history = useHistory();\n  const {dispatch} = useContext(StoreProvider);\n  const [username, setUsername] = useState('');\n\n  function updateUsername() {\n    userService.updateUsername(username, dispatch);\n    history.push('/');\n  }\n\n  return (\n    <>\n      <Typography variant='h4' className='text-center' style={{marginBottom: '2rem'}}>Welcome to<br/>PGA SKINS!</Typography>\n      <Typography variant='body2' className='text-center'>Please enter the user name you want others to see when viewing a skins match created by you:<br/><br/></Typography>\n      <TextField autoComplete='off' variant='outlined' placeholder='User Name' fullWidth\n        value={username} onChange={(e) => setUsername(e.target.value)}\n      />\n      <Button onClick={updateUsername} disabled={username.length < 3 || username.length > 20} style={{marginTop: '1rem'}} variant='contained'>SUBMIT</Button>\n    </>\n  );\n}\n\nexport default WelcomeScreen;","import React from 'react';\nimport './GridNoMenu.css';\nimport { Route, Switch } from 'react-router-dom';\nimport { Container, Box, Typography } from '@material-ui/core';\nimport TopBar from '../../components/TopBar/TopBar';\nimport WelcomeScreen from '../WelcomeScreen/WelcomeScreen';\n\nfunction GridNoMenu(props) {\n  return (\n    <Box className='GNM_grid'>\n      <TopBar />\n      <Container className='flex-col-ctr'>\n        <Switch>\n          <Route exact path='/welcome'>\n            <WelcomeScreen />\n          </Route>\n        </Switch>\n      </Container>\n    </Box>\n  );\n}\n\nexport default GridNoMenu;","import React, { useEffect, useReducer } from 'react';\nimport { Route, Switch, useHistory } from 'react-router-dom';\nimport StoreProvider from './contexts/StoreProvider';\nimport storeReducer, { initialState, actions } from './reducers/store-reducer';\nimport userService from './services/userService';\n\nimport GridWithBottomMenu from './screens/GridWithBottomMenu/GridWithBottomMenu';\nimport GridNoMenu from './screens/GridNoMenu/GridNoMenu';\n\nfunction App() {\n  const history = useHistory();\n  const [state, dispatch] = useReducer(storeReducer, initialState);\n  console.log(state)\n\n  useEffect(function () {\n    if (userService.init(dispatch)) history.push('/welcome');\n    // tourneyService.subscribeToUpdates(function(updatedTourney) {\n    //   dispatch({type: actions.UPDATE_CUR_TOURNEY, payload: updatedTourney});\n    // });\n    // return function () {\n    //   tourneyService.unsubscribeToUpdates();\n    // };\n  }, []);\n\n  return (\n    <StoreProvider.Provider value={{state, dispatch}}>\n      <Switch>\n        <Route path='/welcome'>\n          <GridNoMenu />\n        </Route>\n        {/* Routes without bottom menu go above */}\n        <Route path='/'>\n          <GridWithBottomMenu />\n        </Route>\n      </Switch>\n    </StoreProvider.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {createMuiTheme, ThemeProvider} from '@material-ui/core/styles'; \n\n/*--- hack to fix 100vh on mobile issue ---*/\n// First we get the viewport height and we multiple it by 1% to get a value for a vh unit\nlet vh = window.innerHeight * 0.01;\n// Then we set the value in the --vh custom property to the root of the document\ndocument.documentElement.style.setProperty('--vh', `${vh}px`);\n\n// We listen to the resize event\nwindow.addEventListener('resize', () => {\n  // We execute the same script as before\n  let vh = window.innerHeight * 0.01;\n  document.documentElement.style.setProperty('--vh', `${vh}px`);\n});\n\nconst themeMint = {\n  palette: {\n    primary: { main: '#E8F5E9', contrastText: '#424242' },\n    secondary: { main: '#B9F6CA', contrastText: '#424242' }\n  }\n};\n\nconst theme = createMuiTheme(themeMint, 'Minty Green');\n\nReactDOM.render(\n  <Router>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </Router>\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}